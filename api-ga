!pip install google-analytics-data
import pandas as pd
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import DateRange
from google.analytics.data_v1beta.types import Dimension
from google.analytics.data_v1beta.types import Metric
from google.analytics.data_v1beta.types import MetricType
from google.analytics.data_v1beta.types import RunReportRequest

"""Google Analytics Data API sample application demonstrating the creation
of a basic report.
See https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport
for more information.
"""

def run_sample():
    """Runs the sample."""
    # TODO(developer): Replace this variable with your Google Analytics 4
    #  property ID before running the sample.
    property_id = 257807480
    return run_report(property_id)


def run_report(property_id):
    """Runs a report of active users grouped by country."""
    client = BetaAnalyticsDataClient.from_service_account_json("api_testing.json")
    request = RunReportRequest(
        
        property=f"properties/{property_id}",
        
        dimensions=[
                    Dimension(name="pageTitle"),
                    Dimension(name="pagePathPlusQueryString")
                   ],
        
        metrics=[Metric(name="activeUsers")
               ],
        
        date_ranges=[DateRange(start_date="7daysAgo", end_date="today")
                    ],

    )
    
    return client.run_report(request)


data_api = run_sample()
dataframe_api = pd.DataFrame(
        [
            [i.dimension_values[0].value,i.dimension_values[1].value, i.metric_values[0].value]
            for i in data_api.rows
        ]
    ).rename(
        columns={
            0: data_api.dimension_headers[0].name,
            1: data_api.dimension_headers[1].name,
            2: data_api.metric_headers[0].name,
        }
    )

# change the datatype of active user to int from string 
dataframe_api['activeUsers'] = dataframe_api['activeUsers'].astype(int)

# take only the top 10 record with the highest active users 
dataframe_api_1 = dataframe_api.nlargest(n=10, columns=['activeUsers'], keep='all')


                                
            
